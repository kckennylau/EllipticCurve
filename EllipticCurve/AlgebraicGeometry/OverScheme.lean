/-
Copyright (c) 2025 Kenny Lau. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kenny Lau
-/

import EllipticCurve.AlgebraicGeometry.BigAffineZariski
import EllipticCurve.CategoryTheory.PresheafCostructured
import Mathlib.AlgebraicGeometry.AffineScheme

/-!
# The Category of Commutative Rings Over a Scheme

Fix a scheme `X`. We define the category of commutative rings `R` equipped with a morphism
`Spec R ‚ü∂ X`.

We define a Grothendieck topology on `OverScheme X` and show that sheaves on `OverScheme X` extend
to sheaves on `CommRingCat·µí·µñ`.
-/

universe w v v‚ÇÅ v‚ÇÇ v‚ÇÉ u u‚ÇÅ u‚ÇÇ u‚ÇÉ

open CategoryTheory AlgebraicGeometry Opposite Limits Category

-- MOVE

namespace CategoryTheory.Functor

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] (G : C ‚•§ D)
  (K : GrothendieckTopology D)

class IsLocallyFullEvil (G : C ‚•§ D) : Prop where
  full (G) {X : D} {Y : C} (f : X ‚ü∂ G.obj Y) :
    ‚àÉ (X' : C) (g : X' ‚ü∂ Y) (e : X = G.obj X'), eqToHom e ‚â´ G.map g = f

class IsLocallyFaithfulEvil (G : C ‚•§ D) : Prop where
  faithful (G) {X X' Y : C} {f : X ‚ü∂ Y} {g : X' ‚ü∂ Y} (e : G.obj X = G.obj X')
    (e‚ÇÇ : G.map f = eqToHom e ‚â´ G.map g) : ‚àÉ h : X = X', f = eqToHom h ‚â´ g

theorem _root_.CategoryTheory.Sieve.functorPushforward_functorPullback
    [G.IsLocallyFullEvil] {X : C} (S : Sieve (G.obj X)) :
    (S.functorPullback G).functorPushforward G = S := by
  refine le_antisymm S.functorPullback_pushforward_le fun Y u hu ‚Ü¶ ?_
  obtain ‚ü®Y, u, rfl, rfl‚ü© := IsLocallyFullEvil.full G u
  rw [eqToHom_refl, id_comp] at hu ‚ä¢
  exact Sieve.image_mem_functorPushforward G _ hu

variable [G.IsLocallyFullEvil] [G.IsLocallyFaithfulEvil]

def inducedTopologyEvil : GrothendieckTopology C where
  sieves _ S := K _ (S.functorPushforward G)
  top_mem' X := by
    change K _ _
    rw [Sieve.functorPushforward_top]
    exact K.top_mem _
  pullback_stable' X Y S iYX hS := by
    refine K.superset_covering ?_ (K.pullback_stable (G.map iYX) hS)
    rintro Z f ‚ü®W, iWX, iZW, hS, e‚ü©
    obtain ‚ü®Z, f, rfl, rfl‚ü© := IsLocallyFullEvil.full G f
    obtain ‚ü®U, g, e, rfl‚ü© := IsLocallyFullEvil.full G iZW
    rw [eqToHom_refl, id_comp] at e ‚ä¢
    rw [assoc, ‚Üê map_comp, ‚Üê map_comp] at e
    obtain ‚ü®rfl, e‚ü© := IsLocallyFaithfulEvil.faithful G _ e
    refine ‚ü®_, f, ùüô _, ?_, (id_comp _).symm‚ü©
    rw [eqToHom_refl, id_comp] at e
    exact congr(S.arrows $e).to_iff.mpr (S.downward_closed hS g)
  transitive' X S hS S' H' := by
    apply K.transitive hS
    rintro Y _ ‚ü®Z, g, i, hg, rfl‚ü©
    rw [Sieve.pullback_comp]
    apply K.pullback_stable i
    refine K.superset_covering ?_ (H' hg)
    rintro W _ ‚ü®Z', g', i', hg, rfl‚ü©
    refine ‚ü®Z', g' ‚â´ g , i', hg, ?_‚ü©
    simp

@[simp] lemma coe_inducedTopologyEvil {X : C} :
    G.inducedTopologyEvil K X = {S | S.functorPushforward G ‚àà K _} := rfl

theorem functorPullback_mem_inducedTopologyEvil {X : C} {S : Sieve (G.obj X)} (hs : S ‚àà K _) :
    S.functorPullback G ‚àà G.inducedTopologyEvil K X := by
  rwa [coe_inducedTopologyEvil, Set.mem_setOf, S.functorPushforward_functorPullback]

end CategoryTheory.Functor

-- MOVE
namespace CategoryTheory.CostructuredArrow

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] (S : C ‚•§ D) (T : D)
  (K : GrothendieckTopology C)

open GrothendieckTopology

instance : (proj S T).IsLocallyFullEvil where
  full {X Y} f := ‚ü®mk (S.map f ‚â´ Y.hom), homMk f, rfl, id_comp _‚ü©

instance : (proj S T).IsLocallyFaithfulEvil where
  faithful {X X' Y} f g e‚ÇÅ e‚ÇÇ := by
    obtain ‚ü®X, x, rfl‚ü© := mk_surjective X
    obtain ‚ü®X', x', rfl‚ü© := mk_surjective X'
    obtain ‚ü®Y, y, rfl‚ü© := mk_surjective Y
    change X = X' at e‚ÇÅ; subst e‚ÇÅ
    rw [eqToHom_refl, id_comp] at e‚ÇÇ
    change f.left = g.left at e‚ÇÇ
    have wf : S.map f.left ‚â´ y = x := w f
    have wg : S.map g.left ‚â´ y = x' := w g
    rw [e‚ÇÇ] at wf
    have : x = x' := wf.symm.trans wg; subst this
    refine ‚ü®rfl, ?_‚ü©
    rw [eqToHom_refl, id_comp]
    exact (proj S T).map_injective e‚ÇÇ

def inducedTopology : GrothendieckTopology (CostructuredArrow S T) :=
  (proj S T).inducedTopologyEvil K

variable {S T}

def FamilyOfElements (‚Ñ± : (CostructuredArrow S T)·µí·µñ ‚•§ Type (max w v‚ÇÇ)) (X : CostructuredArrow S T)
    (p : Presieve ((proj S T).obj X)) : Type _ :=
  ‚àÄ ‚¶ÉY‚¶Ñ (u : Y ‚ü∂ ((proj S T).obj X)) (_ : p u), ‚Ñ±.obj (op (mk (S.map u ‚â´ X.hom)))

variable (‚Ñ± : (CostructuredArrow S T)·µí·µñ ‚•§ Type (max w v‚ÇÇ))

namespace FamilyOfElements

variable (X : CostructuredArrow S T) (s : Sieve ((proj S T).obj X))

@[simps] def equiv :
    FamilyOfElements ‚Ñ± X s.arrows ‚âÉ Presieve.FamilyOfElements ‚Ñ± s.functorPullback.arrows where
  toFun elems Y u hu := ‚Ñ±.map (eqToHom ((eq_mk _).trans <| by rw [‚Üê w u])).op (elems u.left hu)
  invFun elems Y u hu := elems (homMk u) hu
  left_inv elems := funext‚ÇÉ fun Y u hu ‚Ü¶ by simp
  right_inv elems := funext‚ÇÉ fun Y u hu ‚Ü¶ by
    obtain ‚ü®Y, y, rfl‚ü© := mk_surjective Y
    obtain ‚ü®u : Y ‚ü∂ X.left, w, rfl‚ü© := homMk_surjective u
    dsimp at w; subst w; simp

-- we'll skip the generalisation
variable {‚Ñ± X s}

def Compatible (elems : FamilyOfElements ‚Ñ± X s.arrows) : Prop :=
  ‚àÄ {Y Z} {f : Y ‚ü∂ ((proj S T).obj X)} (g : Z ‚ü∂ Y) (hf : s f),
    ‚Ñ±.map (homMk g).op (elems _ hf) = elems _ (s.downward_closed hf _)

variable (elems : FamilyOfElements ‚Ñ± X s.arrows)

theorem compatible_equiv_iff_compatible :
    (equiv ‚Ñ± X s elems).Compatible ‚Üî elems.Compatible := by
  rw [Presieve.compatible_iff_sieveCompatible]
  refine ‚ü®fun c Y Z f g hf ‚Ü¶ ?_, fun c Y Z f g hf ‚Ü¶ ?_‚ü©
  ¬∑ have := @c (mk (S.map f ‚â´ X.hom)) (mk (S.map (g ‚â´ f) ‚â´ X.hom)) (homMk f) (homMk g) hf
    simp_rw [equiv_apply, ‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, ‚Üê eqToIso.hom, ‚Üê Iso.op_hom,
      ‚Üê Functor.mapIso_hom, ‚Üê Iso.toEquiv_fun, ‚Üê Equiv.eq_symm_apply, comp_left, homMk_left] at this
    simp [this]
  ¬∑ have : _ = elems ((g ‚â´ f).left) _ := c g.left hf
    simp_rw [equiv_apply, ‚Üê this, ‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp]
    exact congr_arg‚ÇÇ _ (congr_arg _ (by simp)) rfl

@[simp] def toExtension : Presieve.FamilyOfElements (Types.extension ‚Ñ±) s.arrows :=
  fun _ u hu ‚Ü¶ .mk (S.map u ‚â´ X.hom) (elems u hu)

def IsAmalgamation (x‚ÇÄ : ‚Ñ±.obj (op X)) : Prop :=
  ‚àÄ ‚¶ÉY‚¶Ñ (u : Y ‚ü∂ X.left) (hu : s u), ‚Ñ±.map (homMk u).op x‚ÇÄ = elems u hu

variable {elems} {x‚ÇÄ : ‚Ñ±.obj (op X)}

theorem isAmalgamation_equiv_iff :
    (equiv ‚Ñ± X s elems).IsAmalgamation x‚ÇÄ ‚Üî elems.IsAmalgamation x‚ÇÄ := by
  refine ‚ü®fun ha Y u hu ‚Ü¶ ?_, fun ha Y u hu ‚Ü¶ ?_‚ü©
  ¬∑ refine (@ha (mk (S.map u ‚â´ X.hom)) (homMk u) hu).trans ?_
    rw [equiv_apply, eqToHom_op, eqToHom_refl, ‚Ñ±.map_id, types_id_apply]; rfl
  ¬∑ obtain ‚ü®Y, y, rfl‚ü© := mk_surjective Y
    obtain ‚ü®u : Y ‚ü∂ X.left, w, rfl‚ü© := homMk_surjective u
    dsimp at w; subst w
    exact (ha u hu).trans (by simp [equiv])

theorem isAmalgamation_toExtension_iff {X : C} {t : S.obj X ‚ü∂ T} {s : Sieve X}
    {elems : FamilyOfElements ‚Ñ± (mk t) s.arrows}
    (isSheafFor_yoneda : Presieve.IsSheafFor (S.op ‚ãô yoneda.obj T) s.arrows)
    {x‚ÇÄ : (Types.extension ‚Ñ±).obj (op X)} :
    elems.toExtension.IsAmalgamation x‚ÇÄ ‚Üî
      ‚àÉ h : x‚ÇÄ.fst = t, elems.IsAmalgamation (‚Ñ±.map (eqToHom (by rw [h])).op x‚ÇÄ.snd) := by
  refine ‚ü®fun ha ‚Ü¶ ‚ü®?_, ?_‚ü©, fun ha ‚Ü¶ ?_‚ü©
  ¬∑ refine isSheafFor_yoneda.isSeparatedFor.ext fun Y u hu ‚Ü¶ ?_
    simpa using congr($(ha u hu).fst)
  ¬∑ intro Y u hu
    obtain ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := Total.ext_iff'.mp (ha u hu)
    simp only [toExtension, Total.mk] at h‚ÇÇ
    rw [‚Üê eqToIso.hom, ‚Üê Iso.op_hom, ‚Üê Functor.mapIso_hom, ‚Üê Iso.toEquiv_fun,
      ‚Üê Equiv.symm_apply_eq] at h‚ÇÇ
    simp_rw [‚Üê h‚ÇÇ, Equiv.eq_symm_apply, Types.extension_map, Total.comap_snd, Iso.toEquiv_fun,
      Functor.mapIso_hom, ‚Üê FunctorToTypes.map_comp_apply, Iso.op_hom, ‚Üê op_comp]
    exact congr_arg‚ÇÇ _ (congr_arg _ (by simp)) rfl
  ¬∑ obtain ‚ü®rfl, ha‚ü© := ha
    intro Y u hu
    simp [‚Üê ha u hu, Total.comap]

end FamilyOfElements

variable {‚Ñ±}

theorem of_sieveCompatible {X : C} {s : Sieve X}
    (isSheafFor_yoneda : Presieve.IsSheafFor (S.op ‚ãô yoneda.obj T) s.arrows)
    (x : Presieve.FamilyOfElements (Types.extension ‚Ñ±) s.arrows)
    (hx : x.SieveCompatible) :
    ‚àÉ (t : S.obj X ‚ü∂ T) (x‚ÇÄ : FamilyOfElements ‚Ñ± (mk t) s.arrows),
      x‚ÇÄ.toExtension = x ‚àß x‚ÇÄ.Compatible := by
  obtain ‚ü®t, ht, htu‚ü© := isSheafFor_yoneda (fun Y u hu ‚Ü¶ (x u hu).fst) <|
    (Presieve.compatible_iff_sieveCompatible _).mpr fun Y Z f g hf ‚Ü¶ by
      simpa [Between.toHom, Between.fst, Between.snd, Between.terminalFiber,
        Functor.Fiber.fiberInclusion] using congr($(hx f g hf).fst)
  change Sieve ((proj S T).obj (mk t)) at s
  have ht‚ÇÅ {Y} (u : Y ‚ü∂ X) (hu : s u) : S.map u ‚â´ t = (x u hu).fst := ht u hu
  refine ‚ü®t, fun Y u hu ‚Ü¶ ‚Ñ±.map (eqToHom congr(mk $(ht u hu))).op (x u hu).2,
    funext‚ÇÉ fun Y u hu ‚Ü¶ Total.ext (ht u hu) ?_, fun {Y Z f} g hf ‚Ü¶ ?_‚ü©
  ¬∑ simp [FamilyOfElements.toExtension]
  ¬∑ dsimp
    replace hx := hx _ g hf
    rw [Types.extension_map] at hx
    obtain ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü© := Total.ext_iff'.mp hx
    dsimp only at hx‚ÇÇ
    simp_rw [hx‚ÇÇ, Total.comap_snd, ‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp]
    exact congr_arg‚ÇÇ _ (congr_arg _ (by simp)) rfl

@[simps] def sheafOfInduced (‚Ñ± : Sheaf (inducedTopology S T K) (Type (max w v‚ÇÇ)))
    (isSheaf_yoneda : Presheaf.IsSheaf K (S.op ‚ãô yoneda.obj T)) : Sheaf K (Type (max w v‚ÇÇ)) where
  val := Types.extension.{w} ‚Ñ±.val
  cond := by
    have isSheaf_F := ‚Ñ±.cond
    rw [isSheaf_iff_isSheaf_of_type] at isSheaf_F isSheaf_yoneda ‚ä¢
    intro X s hs x hx
    rw [Presieve.compatible_iff_sieveCompatible] at hx
    obtain ‚ü®t, x, rfl, hx'‚ü© := of_sieveCompatible (isSheaf_yoneda _ hs) _ hx
    change Sieve ((proj S T).obj (mk t)) at s
    obtain ‚ü®x‚ÇÄ, hx‚ÇÄ, hx‚ÇÄ'‚ü© := @isSheaf_F (mk t) (s.functorPullback _)
      ((proj S T).functorPullback_mem_inducedTopologyEvil K hs)
      (x.equiv ‚Ñ±.val (mk t) s) (x.compatible_equiv_iff_compatible.mpr hx')
    rw [FamilyOfElements.isAmalgamation_equiv_iff] at hx‚ÇÄ
    refine ‚ü®.mk t x‚ÇÄ, ?_, ?_‚ü©
    ¬∑ exact (FamilyOfElements.isAmalgamation_toExtension_iff (isSheaf_yoneda _ hs)).mpr
        ‚ü®rfl, by simpa using hx‚ÇÄ‚ü©
    ¬∑ intro x‚ÇÅ hx‚ÇÅ
      obtain ‚ü®rfl, hx‚ÇÅ‚ü© :=
        (FamilyOfElements.isAmalgamation_toExtension_iff (isSheaf_yoneda _ hs)).mp hx‚ÇÅ
      exact Total.ext rfl <| hx‚ÇÄ' _ (FamilyOfElements.isAmalgamation_equiv_iff.mpr hx‚ÇÅ)

end CategoryTheory.CostructuredArrow

namespace CommRingCat

-- this shouldn't be in CommRingCat (?), but we put it here for now
/-- The category of affine schemes over a fixed base scheme `ùíÆ`. -/
abbrev OverScheme (ùíÆ : Scheme.{u}) : Type (u + 1) :=
  CostructuredArrow Scheme.Spec ùíÆ

-- -- mathlib #29927
-- instance {C : Type*} [Category C] {D : Type*} [Category D]
--     {F : C ‚•§ D} [F.Faithful] [F.Full] [F.EssSurj] : F.IsEquivalence where

-- /-- The category of commutative rings under `R` is equivalent to
-- the opposite category of affine schemes over `Spec R`. -/
-- noncomputable def costructuredArrowAffineSchemeOpEquivUnder (R : CommRingCat.{u}) :
--     (CostructuredArrow AffineScheme.Spec (AffineScheme.of (Spec R)))·µí·µñ ‚âå Under R :=
--   let F‚ÇÅ := StructuredArrow.pre (op (AffineScheme.of (Spec R))) AffineScheme.Spec.op (ùü≠ _)
--   let F‚ÇÇ :
--       StructuredArrow R (ùü≠ CommRingCat) ‚•§
--       StructuredArrow (AffineScheme.Spec.rightOp.obj R) (ùü≠ AffineScheme·µí·µñ) :=
--     StructuredArrow.map‚ÇÇ (F := AffineScheme.Spec.rightOp) (ùüô _) (ùüô _)
--   (costructuredArrowOpEquivalence _ _).trans (F‚ÇÅ ‚ãô F‚ÇÇ.asEquivalence.inverse).asEquivalence

-- /-- Equivalence between `CostructuredArrow` for `AffineScheme`, and `OverScheme`. -/
-- noncomputable def costructuredArrowAffineSchemeEquivOverScheme (R : CommRingCat.{u}) :
--     CostructuredArrow AffineScheme.Spec (AffineScheme.of (Spec R)) ‚âå
--     OverScheme (Spec R) :=
--   (CostructuredArrow.map‚ÇÇ (F := ùü≠ CommRingCat·µí·µñ) (G := AffineScheme.forgetToScheme)
--     (ùüô _) (ùüô _)).asEquivalence

/-- The category of commutative rings under `R` is equivalent to
the opposite category of affine schemes over `Spec R`. -/
noncomputable def overSchemeOpEquivUnder (R : CommRingCat.{u}) :
    (OverScheme (Spec R))·µí·µñ ‚âå Under R :=
  (costructuredArrowOpEquivalence _ _).trans
    (StructuredArrow.map‚ÇÇ (F := opOp _) (G := Scheme.Spec.rightOp) (ùüô _) (ùüô _)).asEquivalence.symm
  -- (costructuredArrowAffineSchemeEquivOverScheme R).symm.op.trans
  --   (costructuredArrowAffineSchemeOpEquivUnder R)

namespace OverScheme

variable (ùíÆ : Scheme.{u})

@[simps!] noncomputable abbrev forget : OverScheme ùíÆ ‚•§ CommRingCat.{u}·µí·µñ :=
  CostructuredArrow.proj Scheme.Spec ùíÆ

@[simps!] noncomputable nonrec
def zariskiTopology : GrothendieckTopology (OverScheme ùíÆ) :=
  CostructuredArrow.inducedTopology _ _ zariskiTopology

end OverScheme

-- MOVE
instance hasLimitsOfShape_structuredArrow_op
    {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
    {T : Type u‚ÇÉ} [Category.{v‚ÇÉ} T] {S : C ‚•§ D} {d : D·µí·µñ}
    [HasColimitsOfShape (CostructuredArrow S d.unop) T·µí·µñ] :
    HasLimitsOfShape (StructuredArrow d S.op) T := by
  obtain ‚ü®d‚ü© := d
  have h‚ÇÅ : HasColimitsOfShape (StructuredArrow (op d) S.op)·µí·µñ T·µí·µñ :=
    hasColimitsOfShape_of_equivalence (costructuredArrowOpEquivalence S d).rightOp
  exact hasLimitsOfShape_of_hasColimitsOfShape_op

instance hasLimitsOfShape_all_structuredArrow_op
    {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
    {T : Type u‚ÇÉ} [Category.{v‚ÇÉ} T] {S : C ‚•§ D}
    [‚àÄ d : D, HasColimitsOfShape (CostructuredArrow S d) T·µí·µñ] :
    ‚àÄ d : D·µí·µñ, HasLimitsOfShape (StructuredArrow d S.op) T :=
  fun _ ‚Ü¶ hasLimitsOfShape_structuredArrow_op

variable {ùíÆ : Scheme.{u}}

-- MOVE
instance : Scheme.Spec.IsDenseSubsite zariskiTopology Scheme.zariskiTopology where
  functorPushforward_mem_iff {X S} := by simp [zariskiTopology]

theorem affine_subcanonical : Presheaf.IsSheaf zariskiTopology (Scheme.Spec.op ‚ãô yoneda.obj ùíÆ) :=
  ((Scheme.Spec.sheafPushforwardContinuous (Type u) zariskiTopology Scheme.zariskiTopology).obj
    (Scheme.zariskiTopology.yoneda.obj ùíÆ)).cond

@[simps!] noncomputable def sheafOfOverScheme
    (S : Sheaf (OverScheme.zariskiTopology ùíÆ) (Type (max w u))) :
    Sheaf zariskiTopology (Type (max w u)) :=
  CostructuredArrow.sheafOfInduced _ S affine_subcanonical

end CommRingCat
